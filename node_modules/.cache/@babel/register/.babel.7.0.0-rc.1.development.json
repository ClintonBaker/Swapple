{
  "{\"plugins\":[{\"key\":\"/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$0\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$2\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"sourceRoot\":\"/home/dillon/Projects/Swapple\",\"cwd\":\"/home/dillon/Projects/Swapple\",\"filename\":\"/home/dillon/Projects/Swapple/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/dillon/Projects/Swapple\",\"presets\":[]}:7.0.0-rc.1": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/dillon/Projects/Swapple",
      "cwd": "/home/dillon/Projects/Swapple",
      "filename": "/home/dillon/Projects/Swapple/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/dillon/Projects/Swapple",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$0",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$2",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "/home/dillon/Projects/Swapple/node_modules/@babel/preset-env/lib/index.js$3",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/dillon/Projects/Swapple/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread"
        ]
      },
      "generatorOpts": {
        "filename": "/home/dillon/Projects/Swapple/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/dillon/Projects/Swapple",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _inquirer = _interopRequireDefault(require(\"inquirer\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst chooseChunks = chunks => {\n  return _inquirer.default.prompt([{\n    type: \"checkbox\",\n    message: \"Choose code blocks to swapple\",\n    name: \"chunks\",\n    choices: chunks\n  }]).then(chunks => {\n    return chunks.chunks;\n  });\n};\n\nconst findCodeChunks = file => {\n  // Return name of chunk, start index, and end index.\n  let chunks = [];\n\n  for (let firstOccurence = 0; firstOccurence < file.length; firstOccurence++) {\n    if (file[firstOccurence].indexOf(\"// +\") >= 0) {\n      for (let secondOccurence = firstOccurence + 1; secondOccurence < file.length; secondOccurence++) {\n        if (file[secondOccurence].indexOf(\"// -\") >= 0) {\n          let chunkName = file[firstOccurence].slice(file[firstOccurence].indexOf(\"+\") + 1).trim();\n          let toggled = file[firstOccurence + 1].indexOf(\"//\") < 0;\n          chunks.push({\n            name: chunkName,\n            start: firstOccurence,\n            end: secondOccurence,\n            toggled\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  return chunks;\n};\n\nconst swapple = (page, chunks, toToggle) => {\n  chunks.forEach(chunk => {\n    if (toToggle.indexOf(chunk.name) >= 0) {\n      for (let line = chunk.start + 1; line < chunk.end; line++) {\n        if (chunk.toggled) {\n          page[line] = \"//\" + page[line];\n        } else {\n          page[line] = page[line].replace(\"//\", \"\");\n        }\n      }\n    }\n  });\n  return page.join(\"\\n\");\n};\n\n_fs.default.readFile(\"test.js\", \"utf8\", async (err, data) => {\n  if (err) throw err;\n  let page = data.split(\"\\n\");\n  const chunks = findCodeChunks(page);\n  let toToggle = await chooseChunks(chunks);\n\n  _fs.default.writeFile(\"test.js\", swapple(page, chunks, toToggle), err => {\n    if (err) {\n      return console.log(err);\n    }\n\n    console.log(\"Let me swapple that for ya!\");\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNob29zZUNodW5rcyIsImNodW5rcyIsImlucXVpcmVyIiwicHJvbXB0IiwidHlwZSIsIm1lc3NhZ2UiLCJuYW1lIiwiY2hvaWNlcyIsInRoZW4iLCJmaW5kQ29kZUNodW5rcyIsImZpbGUiLCJmaXJzdE9jY3VyZW5jZSIsImxlbmd0aCIsImluZGV4T2YiLCJzZWNvbmRPY2N1cmVuY2UiLCJjaHVua05hbWUiLCJzbGljZSIsInRyaW0iLCJ0b2dnbGVkIiwicHVzaCIsInN0YXJ0IiwiZW5kIiwic3dhcHBsZSIsInBhZ2UiLCJ0b1RvZ2dsZSIsImZvckVhY2giLCJjaHVuayIsImxpbmUiLCJyZXBsYWNlIiwiam9pbiIsImZzIiwicmVhZEZpbGUiLCJlcnIiLCJkYXRhIiwic3BsaXQiLCJ3cml0ZUZpbGUiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHQyxNQUFNLElBQUk7QUFDN0IsU0FBT0Msa0JBQ0pDLE1BREksQ0FDRyxDQUNOO0FBQ0VDLElBQUFBLElBQUksRUFBRSxVQURSO0FBRUVDLElBQUFBLE9BQU8sRUFBRSwrQkFGWDtBQUdFQyxJQUFBQSxJQUFJLEVBQUUsUUFIUjtBQUlFQyxJQUFBQSxPQUFPLEVBQUVOO0FBSlgsR0FETSxDQURILEVBU0pPLElBVEksQ0FTQ1AsTUFBTSxJQUFJO0FBQ2QsV0FBT0EsTUFBTSxDQUFDQSxNQUFkO0FBQ0QsR0FYSSxDQUFQO0FBWUQsQ0FiRDs7QUFlQSxNQUFNUSxjQUFjLEdBQUdDLElBQUksSUFBSTtBQUM3QjtBQUVBLE1BQUlULE1BQU0sR0FBRyxFQUFiOztBQUNBLE9BQUssSUFBSVUsY0FBYyxHQUFHLENBQTFCLEVBQTZCQSxjQUFjLEdBQUdELElBQUksQ0FBQ0UsTUFBbkQsRUFBMkRELGNBQWMsRUFBekUsRUFBNkU7QUFDM0UsUUFBSUQsSUFBSSxDQUFDQyxjQUFELENBQUosQ0FBcUJFLE9BQXJCLENBQTZCLE1BQTdCLEtBQXdDLENBQTVDLEVBQStDO0FBQzdDLFdBQ0UsSUFBSUMsZUFBZSxHQUFHSCxjQUFjLEdBQUcsQ0FEekMsRUFFRUcsZUFBZSxHQUFHSixJQUFJLENBQUNFLE1BRnpCLEVBR0VFLGVBQWUsRUFIakIsRUFJRTtBQUNBLFlBQUlKLElBQUksQ0FBQ0ksZUFBRCxDQUFKLENBQXNCRCxPQUF0QixDQUE4QixNQUE5QixLQUF5QyxDQUE3QyxFQUFnRDtBQUM5QyxjQUFJRSxTQUFTLEdBQUdMLElBQUksQ0FBQ0MsY0FBRCxDQUFKLENBQ2JLLEtBRGEsQ0FDUE4sSUFBSSxDQUFDQyxjQUFELENBQUosQ0FBcUJFLE9BQXJCLENBQTZCLEdBQTdCLElBQW9DLENBRDdCLEVBRWJJLElBRmEsRUFBaEI7QUFHQSxjQUFJQyxPQUFPLEdBQUdSLElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQWxCLENBQUosQ0FBeUJFLE9BQXpCLENBQWlDLElBQWpDLElBQXlDLENBQXZEO0FBQ0FaLFVBQUFBLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWTtBQUNWYixZQUFBQSxJQUFJLEVBQUVTLFNBREk7QUFFVkssWUFBQUEsS0FBSyxFQUFFVCxjQUZHO0FBR1ZVLFlBQUFBLEdBQUcsRUFBRVAsZUFISztBQUlWSSxZQUFBQTtBQUpVLFdBQVo7QUFNQTtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFNBQU9qQixNQUFQO0FBQ0QsQ0E3QkQ7O0FBK0JBLE1BQU1xQixPQUFPLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPdEIsTUFBUCxFQUFldUIsUUFBZixLQUE0QjtBQUMxQ3ZCLEVBQUFBLE1BQU0sQ0FBQ3dCLE9BQVAsQ0FBZUMsS0FBSyxJQUFJO0FBQ3RCLFFBQUlGLFFBQVEsQ0FBQ1gsT0FBVCxDQUFpQmEsS0FBSyxDQUFDcEIsSUFBdkIsS0FBZ0MsQ0FBcEMsRUFBdUM7QUFDckMsV0FBSyxJQUFJcUIsSUFBSSxHQUFHRCxLQUFLLENBQUNOLEtBQU4sR0FBYyxDQUE5QixFQUFpQ08sSUFBSSxHQUFHRCxLQUFLLENBQUNMLEdBQTlDLEVBQW1ETSxJQUFJLEVBQXZELEVBQTJEO0FBQ3pELFlBQUlELEtBQUssQ0FBQ1IsT0FBVixFQUFtQjtBQUNqQkssVUFBQUEsSUFBSSxDQUFDSSxJQUFELENBQUosR0FBYSxPQUFPSixJQUFJLENBQUNJLElBQUQsQ0FBeEI7QUFDRCxTQUZELE1BRU87QUFDTEosVUFBQUEsSUFBSSxDQUFDSSxJQUFELENBQUosR0FBYUosSUFBSSxDQUFDSSxJQUFELENBQUosQ0FBV0MsT0FBWCxDQUFtQixJQUFuQixFQUF5QixFQUF6QixDQUFiO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsR0FWRDtBQVdBLFNBQU9MLElBQUksQ0FBQ00sSUFBTCxDQUFVLElBQVYsQ0FBUDtBQUNELENBYkQ7O0FBZUFDLFlBQUdDLFFBQUgsQ0FBWSxTQUFaLEVBQXVCLE1BQXZCLEVBQStCLE9BQU9DLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUNsRCxNQUFJRCxHQUFKLEVBQVMsTUFBTUEsR0FBTjtBQUVULE1BQUlULElBQUksR0FBR1UsSUFBSSxDQUFDQyxLQUFMLENBQVcsSUFBWCxDQUFYO0FBRUEsUUFBTWpDLE1BQU0sR0FBR1EsY0FBYyxDQUFDYyxJQUFELENBQTdCO0FBRUEsTUFBSUMsUUFBUSxHQUFHLE1BQU14QixZQUFZLENBQUNDLE1BQUQsQ0FBakM7O0FBRUE2QixjQUFHSyxTQUFILENBQWEsU0FBYixFQUF3QmIsT0FBTyxDQUFDQyxJQUFELEVBQU90QixNQUFQLEVBQWV1QixRQUFmLENBQS9CLEVBQXlEUSxHQUFHLElBQUk7QUFDOUQsUUFBSUEsR0FBSixFQUFTO0FBQ1AsYUFBT0ksT0FBTyxDQUFDQyxHQUFSLENBQVlMLEdBQVosQ0FBUDtBQUNEOztBQUVESSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2QkFBWjtBQUNELEdBTkQ7QUFPRCxDQWhCRCIsInNvdXJjZVJvb3QiOiIvaG9tZS9kaWxsb24vUHJvamVjdHMvU3dhcHBsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnF1aXJlciBmcm9tIFwiaW5xdWlyZXJcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcblxuY29uc3QgY2hvb3NlQ2h1bmtzID0gY2h1bmtzID0+IHtcbiAgcmV0dXJuIGlucXVpcmVyXG4gICAgLnByb21wdChbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgbWVzc2FnZTogXCJDaG9vc2UgY29kZSBibG9ja3MgdG8gc3dhcHBsZVwiLFxuICAgICAgICBuYW1lOiBcImNodW5rc1wiLFxuICAgICAgICBjaG9pY2VzOiBjaHVua3NcbiAgICAgIH1cbiAgICBdKVxuICAgIC50aGVuKGNodW5rcyA9PiB7XG4gICAgICByZXR1cm4gY2h1bmtzLmNodW5rcztcbiAgICB9KTtcbn07XG5cbmNvbnN0IGZpbmRDb2RlQ2h1bmtzID0gZmlsZSA9PiB7XG4gIC8vIFJldHVybiBuYW1lIG9mIGNodW5rLCBzdGFydCBpbmRleCwgYW5kIGVuZCBpbmRleC5cblxuICBsZXQgY2h1bmtzID0gW107XG4gIGZvciAobGV0IGZpcnN0T2NjdXJlbmNlID0gMDsgZmlyc3RPY2N1cmVuY2UgPCBmaWxlLmxlbmd0aDsgZmlyc3RPY2N1cmVuY2UrKykge1xuICAgIGlmIChmaWxlW2ZpcnN0T2NjdXJlbmNlXS5pbmRleE9mKFwiLy8gK1wiKSA+PSAwKSB7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2Vjb25kT2NjdXJlbmNlID0gZmlyc3RPY2N1cmVuY2UgKyAxO1xuICAgICAgICBzZWNvbmRPY2N1cmVuY2UgPCBmaWxlLmxlbmd0aDtcbiAgICAgICAgc2Vjb25kT2NjdXJlbmNlKytcbiAgICAgICkge1xuICAgICAgICBpZiAoZmlsZVtzZWNvbmRPY2N1cmVuY2VdLmluZGV4T2YoXCIvLyAtXCIpID49IDApIHtcbiAgICAgICAgICBsZXQgY2h1bmtOYW1lID0gZmlsZVtmaXJzdE9jY3VyZW5jZV1cbiAgICAgICAgICAgIC5zbGljZShmaWxlW2ZpcnN0T2NjdXJlbmNlXS5pbmRleE9mKFwiK1wiKSArIDEpXG4gICAgICAgICAgICAudHJpbSgpO1xuICAgICAgICAgIGxldCB0b2dnbGVkID0gZmlsZVtmaXJzdE9jY3VyZW5jZSArIDFdLmluZGV4T2YoXCIvL1wiKSA8IDA7XG4gICAgICAgICAgY2h1bmtzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogY2h1bmtOYW1lLFxuICAgICAgICAgICAgc3RhcnQ6IGZpcnN0T2NjdXJlbmNlLFxuICAgICAgICAgICAgZW5kOiBzZWNvbmRPY2N1cmVuY2UsXG4gICAgICAgICAgICB0b2dnbGVkXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2h1bmtzO1xufTtcblxuY29uc3Qgc3dhcHBsZSA9IChwYWdlLCBjaHVua3MsIHRvVG9nZ2xlKSA9PiB7XG4gIGNodW5rcy5mb3JFYWNoKGNodW5rID0+IHtcbiAgICBpZiAodG9Ub2dnbGUuaW5kZXhPZihjaHVuay5uYW1lKSA+PSAwKSB7XG4gICAgICBmb3IgKGxldCBsaW5lID0gY2h1bmsuc3RhcnQgKyAxOyBsaW5lIDwgY2h1bmsuZW5kOyBsaW5lKyspIHtcbiAgICAgICAgaWYgKGNodW5rLnRvZ2dsZWQpIHtcbiAgICAgICAgICBwYWdlW2xpbmVdID0gXCIvL1wiICsgcGFnZVtsaW5lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdlW2xpbmVdID0gcGFnZVtsaW5lXS5yZXBsYWNlKFwiLy9cIiwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFnZS5qb2luKFwiXFxuXCIpO1xufTtcblxuZnMucmVhZEZpbGUoXCJ0ZXN0LmpzXCIsIFwidXRmOFwiLCBhc3luYyAoZXJyLCBkYXRhKSA9PiB7XG4gIGlmIChlcnIpIHRocm93IGVycjtcblxuICBsZXQgcGFnZSA9IGRhdGEuc3BsaXQoXCJcXG5cIik7XG5cbiAgY29uc3QgY2h1bmtzID0gZmluZENvZGVDaHVua3MocGFnZSk7XG5cbiAgbGV0IHRvVG9nZ2xlID0gYXdhaXQgY2hvb3NlQ2h1bmtzKGNodW5rcyk7XG5cbiAgZnMud3JpdGVGaWxlKFwidGVzdC5qc1wiLCBzd2FwcGxlKHBhZ2UsIGNodW5rcywgdG9Ub2dnbGUpLCBlcnIgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiTGV0IG1lIHN3YXBwbGUgdGhhdCBmb3IgeWEhXCIpO1xuICB9KTtcbn0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "chooseChunks",
        "chunks",
        "inquirer",
        "prompt",
        "type",
        "message",
        "name",
        "choices",
        "then",
        "findCodeChunks",
        "file",
        "firstOccurence",
        "length",
        "indexOf",
        "secondOccurence",
        "chunkName",
        "slice",
        "trim",
        "toggled",
        "push",
        "start",
        "end",
        "swapple",
        "page",
        "toToggle",
        "forEach",
        "chunk",
        "line",
        "replace",
        "join",
        "fs",
        "readFile",
        "err",
        "data",
        "split",
        "writeFile",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/home/dillon/Projects/Swapple",
      "sourcesContent": [
        "import inquirer from \"inquirer\";\nimport fs from \"fs\";\n\nconst chooseChunks = chunks => {\n  return inquirer\n    .prompt([\n      {\n        type: \"checkbox\",\n        message: \"Choose code blocks to swapple\",\n        name: \"chunks\",\n        choices: chunks\n      }\n    ])\n    .then(chunks => {\n      return chunks.chunks;\n    });\n};\n\nconst findCodeChunks = file => {\n  // Return name of chunk, start index, and end index.\n\n  let chunks = [];\n  for (let firstOccurence = 0; firstOccurence < file.length; firstOccurence++) {\n    if (file[firstOccurence].indexOf(\"// +\") >= 0) {\n      for (\n        let secondOccurence = firstOccurence + 1;\n        secondOccurence < file.length;\n        secondOccurence++\n      ) {\n        if (file[secondOccurence].indexOf(\"// -\") >= 0) {\n          let chunkName = file[firstOccurence]\n            .slice(file[firstOccurence].indexOf(\"+\") + 1)\n            .trim();\n          let toggled = file[firstOccurence + 1].indexOf(\"//\") < 0;\n          chunks.push({\n            name: chunkName,\n            start: firstOccurence,\n            end: secondOccurence,\n            toggled\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  return chunks;\n};\n\nconst swapple = (page, chunks, toToggle) => {\n  chunks.forEach(chunk => {\n    if (toToggle.indexOf(chunk.name) >= 0) {\n      for (let line = chunk.start + 1; line < chunk.end; line++) {\n        if (chunk.toggled) {\n          page[line] = \"//\" + page[line];\n        } else {\n          page[line] = page[line].replace(\"//\", \"\");\n        }\n      }\n    }\n  });\n  return page.join(\"\\n\");\n};\n\nfs.readFile(\"test.js\", \"utf8\", async (err, data) => {\n  if (err) throw err;\n\n  let page = data.split(\"\\n\");\n\n  const chunks = findCodeChunks(page);\n\n  let toToggle = await chooseChunks(chunks);\n\n  fs.writeFile(\"test.js\", swapple(page, chunks, toToggle), err => {\n    if (err) {\n      return console.log(err);\n    }\n\n    console.log(\"Let me swapple that for ya!\");\n  });\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1534467207716
  }
}